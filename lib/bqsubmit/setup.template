#!/bin/sh
###############################################################################
# Batch Queuing Tools (bqTools) 
#
# Copyright (C) 2018  Minh-Nghia Nguyen <Minh-Nghia.Nguyen@CalculQuebec.ca>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################
my_func() {
	COPYFILES=(~~copyFiles~~)
	LINKFILES=(~~linkFiles~~)
	TEMPLATEFILES=(~~templateFiles~~)
	KEYSLIST=(~~keysList~~)
	VALUESLIST=("$@")
	NKEYS=${#KEYSLIST[@]}

	BQMICROJOBNUM=${VALUESLIST[$NKEYS]}
	BQJOBSTOTAL=${VALUESLIST[$(($NKEYS+1))]}
	BQJOBNUM=$((($BQMICROJOBNUM-1)/~~microJobs~~+1))
	BQSUBDIR=$(printf "%s_%05d.BQ/%05d.BQ\n" ~~batchName~~ $BQJOBNUM $BQMICROJOBNUM)
    BQPARAM=$BQSUBDIR/.bqparam
    BQSED=$BQSUBDIR/.bqsed
    BQTOPSED=.~~batchName~~_sed
    BQSYMLINK=""

	# Create batch subdirectory
	#----------------------------------------------------------------------
	mkdir -p $BQSUBDIR

	# Create sed script file for token replacement
	#----------------------------------------------------------------------
	if [ -e $BQTOPSED ]; then
		cp -f $BQTOPSED $BQSED
	fi		
	
	for ((_i=0; _i < $NKEYS; _i++)) {
        _key=${KEYSLIST[$_i]}
        _value=${VALUESLIST[$_i]}

        echo $_key $_value 
		printf "s/~~%s~~/%s/g\n" $_key $_value >> $BQSED
        BQSYMLINK=${BQSYMLINK}_"$_key$_value"
	} > $BQPARAM

	# Copy files in batch subdirectory
	#----------------------------------------------------------------------
	for _a in ${COPYFILES[@]}
	do
		if [ ! -e $_a ]; then
			echo copyFiles: $_a not found, Exiting ...
			exit 1
		fi				
		if [ ! -e $BQSUBDIR/$_a ]; then cp $_a $BQSUBDIR; fi
	done

	# Create symbolic links in batch subdirectory
	#----------------------------------------------------------------------
	for _a in ${LINKFILES[@]}
	do
		if [ ! -e $_a ]; then
			echo linkFiles: $_a not found, Exiting ...
			exit 1
		fi				
		if [ ! -e $BQSUBDIR/$_a ]; then	ln -s ../../$_a $BQSUBDIR/$_a; fi
	done

	# Copy template files in batch subdirectory
	#--------------------------------------------------------------------------
	for _a in ${TEMPLATEFILES[@]}
	do
		if [ ! -e $_a ]; then
			echo templateFiles: $_a not found, Exiting ...
			exit 1
		fi
		sed -f $BQSED $_a > $BQSUBDIR/$_a
             
        KEYUNDEF=$(grep "~~" $BQSUBDIR/$_a)   
        if [ "$KEYUNDEF" ]; then
            echo "($BQSUBDIR/$_a) $KEYUNDEF: Key not defined"
            exit 1
        fi
	done

    # Run pre job command
    #--------------------------------------------------------------------------    
    if [ "~~preJob~~" ]; then
        cd $BQSUBDIR
        ~~preJob~~
        cd ../..   
    fi

    # Create symbolic link with keys and values
    #--------------------------------------------------------------------------
    if [ ~~paramSymLinks~~ -ne 0 ]; then
        if [ ! -e ~~batchName~~${BQSYMLINK}.BQ ]; then
            ln -s $BQSUBDIR ~~batchName~~${BQSYMLINK}.BQ
        fi
    fi

    # Save total cases
    #--------------------------------------------------------------------------
    if [ $BQJOBSTOTAL -eq $BQMICROJOBNUM ]; then
	echo
    echo "  Variables              : ~~keysList~~"
	echo "  Micro jobs directories : $BQMICROJOBNUM"
	echo "  Jobs to submit         : $BQJOBNUM (~~microJobs~~ micro jobs per job)"
	
        echo s/~~jobsMax~~/$BQJOBNUM/g >> $BQTOPSED
        echo s/~~microJobsMax~~/$BQMICROJOBNUM/g >> $BQTOPSED
    fi

	# Show setup progression when completed
	#--------------------------------------------------------------------------
	printf "."
}

export -f my_func

parallel -k --plus my_func {} {#} {##} ~~valuesList~~

